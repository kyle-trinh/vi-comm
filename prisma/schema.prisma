// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  username    String  @unique
  name        String?
  phoneNumber String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  listings Listing[]
  listingComments ListingComment[]
  listingUpvotes ListingUpvote[]
  listingCommentUpvotes ListingCommentUpvote[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model ListingCategory {
  id          String @id @default(cuid())
  title       String 
  description String
  slug        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings Listing[]
  listingCategoryImage ListingCategoryImage?
}

model Listing {
  id          String @id @default(cuid())
  title       String
  description String 
  isFeatured  Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingCategory   ListingCategory @relation(fields: [listingCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listingCategoryId String

  city ListingCity @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityId String

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  listingComments ListingComment[]
  listingImages ListingImage[]
  listingUpvotes ListingUpvote[]
}

model ListingCity {
  id        String @id @default(cuid())
  name      String
  province  String
  slug      String

  listings Listing[]
}

model ListingImage {
  id          String @id @default(cuid())
  contentType String 
  blob        Bytes 
  isThumbnail Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listingId String
}

model ListingCategoryImage {
  id            String @id @default(cuid())
  contentType   String
  blob          Bytes 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingCategory ListingCategory @relation(fields: [listingCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listingCategoryId String @unique
}

model ListingComment {
  id            String @id @default(cuid())
  content       String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listingId String

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  listingCommentUpvotes ListingCommentUpvote[]
}

model ListingUpvote {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listingId String

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  @@id([listingId, ownerId])
}

model ListingCommentUpvote {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingComment ListingComment @relation(fields: [listingCommentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  listingCommentId String

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  @@id([listingCommentId, ownerId])
}